<?php
/**
 * Unit tests for ActionErrorHandler object.
 *
 * @access      private
 * @package     Creovel
 * @subpackage  UnitTest
 * @license     http://creovel.org/license MIT License
 * @since       Class available since Release 0.4.5
 * @author      Nesbert Hidalgo
 **/
require_once dirname(dirname(__FILE__)) . DIRECTORY_SEPARATOR . 'env.php';

/**
 * Test class for ActionRouter.
 * Generated by PHPUnit on 2010-06-28 at 11:40:43.
 */
class ActionRouterTest extends PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->setUpUri();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {}
    
    protected function setUpUri($uri = null)
    {
        $_SERVER['REQUEST_URI'] = $uri ? $uri : 'http://www.testapp.com/news/article/id/12345';
        $GLOBALS['CREOVEL']['DISPATCHER'] = 'index.php';
        
        // Set routing defaults
        $GLOBALS['CREOVEL']['ROUTING'] = @parse_url($_SERVER['REQUEST_URI']);
        $GLOBALS['CREOVEL']['ROUTING']['current'] = array();
        $GLOBALS['CREOVEL']['ROUTING']['routes'] = array();
        
        // set additional routing options
        $GLOBALS['CREOVEL']['ROUTING']['base_path'] = Creovel::base_path();
        $GLOBALS['CREOVEL']['ROUTING']['base_url'] = '/';        
        
        $this->r = &$GLOBALS['CREOVEL']['ROUTING'];
                
        // Set default route
        ActionRouter::map('default', '/:controller/:action/*', array(
                    'controller' => 'index',
                    'action' => 'index'
                    ));
        
        // Set default error route
        ActionRouter::map('errors', '/errors/:action/*', array(
                    'controller' => 'errors',
                    'action' => 'general'
                    ));        
    }

    public function testMap()
    {
        $this->assertTrue(!empty($this->r['routes']['default']));
        $this->assertEquals('default', $this->r['routes']['default']['name']);
        $this->assertTrue(!empty($this->r['routes']['errors']));
        $this->assertEquals('errors', $this->r['routes']['errors']['name']);
    }

    public function testAdd()
    {
        $name = 'default';
        $url = '/:controller/:action/*';
        $events = array('controller' => 'news', 'action' => 'article');
        $params = array('id' => 12345);
        $pattern = '/^([A-Za-z0-9_\-\+.:\/]+|$)$/';
        
        ActionRouter::add($name, $url, $events, $params, $pattern);
        
        $this->assertTrue(!empty($this->r['routes']['default']));
        $this->assertEquals('default', $this->r['routes']['default']['name']);
    }

    public function testWhich()
    {
        $r = ActionRouter::which();
        $this->assertEquals(array('controller' => 'news', 'action' => 'article'), $r);
        
        $this->setUpUri('http://www.testapp.com');
        ActionRouter::map(
            'default',
            '/:controller/:action/*',
            array('controller' => 'blog')
            );
        $r = ActionRouter::which();
        $this->assertEquals(array('controller' => 'blog', 'action' => 'index'), $r);
        
        $this->setUpUri('http://www.testapp.com/blog/new-post');
        $r = ActionRouter::which();
        $e = ActionRouter::events();
        $p = ActionRouter::params();
        $this->assertEquals(array('controller' => 'blog', 'action' => 'new-post'), $r);
        $this->assertEquals(array('controller' => 'blog', 'action' => 'new-post'), $e);
        $this->assertEquals(array(), $p);
        
        $this->setUpUri('http://www.testapp.com/date/2010/12/25/christmas-day');
        ActionRouter::map('blog', '/date/:year/:month/:day/:title/*', array(
            'controller' => 'blog',
            'action' => 'posts',
            'year' => date('Y'),
            'month' => date('m'),
            'day' => date('d')),
            array(
                ':year' => '/\d{4}/',
                ':month' => '/\d{1,2}/',
                ':day' => '/\d{1,2}/'
                )
            );
            
        $r = ActionRouter::which();
        $e = ActionRouter::events();
        $p = ActionRouter::params();
        $this->assertEquals(array('controller' => 'blog', 'action' => 'posts'), $r);
        $this->assertEquals(array('controller' => 'blog', 'action' => 'posts'), $e);
        $this->assertEquals(array('year' => '2010', 'month' => '12', 'day' => '25', 'title' => 'christmas-day'), $p);
    }

    public function testEvents()
    {
        $r = ActionRouter::events();
        $this->assertEquals(array('controller' => 'news', 'action' => 'article'), $r);
        $r = ActionRouter::events(null, 'errors');
        $this->assertEquals(array('controller' => 'errors', 'action' => 'article'), $r);
    }

    public function testParams()
    {
        $this->assertEquals(array('id' => '12345'), ActionRouter::params());
    }

    public function testError()
    {
        $r = ActionRouter::error();
        $this->assertEquals(array('controller' => 'errors', 'action' => 'article'), $r);
    }

    public function testClean_label()
    {
        $this->assertEquals('action', ActionRouter::clean_label('action'));
        $this->assertEquals('action', ActionRouter::clean_label(':action'));
    }

    public function testTrim_slashes()
    {
        $this->assertEquals('action', ActionRouter::trim_slashes('/action/'));
        $this->assertEquals('action', ActionRouter::trim_slashes('/action'));
        $this->assertEquals('action', ActionRouter::trim_slashes('action/'));
    }

    public function testClean_event()
    {
        $this->assertEquals('action', ActionRouter::clean_event('action.html'));
        $this->assertEquals('action', ActionRouter::clean_event('action'));
        $GLOBALS['CREOVEL']['VIEW_EXTENSION'] = 'php';
        $this->assertEquals('action', ActionRouter::clean_event('action.php'));
        $this->assertEquals('action', ActionRouter::clean_event('action'));
    }
}
?>
